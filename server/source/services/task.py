from .db import *

class Task(Db):
    def __init__(self, connection):
        super().__init__(connection)

    def fetchByRandom(self):
        taskobj = self._fetch("""
            SELECT * FROM task
            WHERE is_active = TRUE
            LIMIT 1
        """)
        if (len(taskobj) == 1):
            return taskobj[0]
        else:
            return None

    def fetchByLabel(self, label):
        taskobj = self._fetch("""
            SELECT * FROM task
            WHERE label = %(label)s AND is_active = TRUE
            LIMIT 1
        """, {'label': label,})
        if (len(taskobj) == 1):
            return taskobj[0]
        else:
            return None

    def push(self, label, subjectId, optionIds, effectIds):
        id = self._execute("""
            INSERT INTO task (label, is_active, description, subject_id)
            VALUES (%(label)s, TRUE, 'autogenerated', %(subject_id)s)
            RETURNING id
        """, {'label': label, 'subject_id': subjectId,}, True)
        for optionId in optionIds:
            self._execute("""
                INSERT INTO task_option (task_id, option_id)
                VALUES (%(task_id)s, %(option_id)s)
            """, {'task_id': id, 'option_id': optionId,}, False, False)
        for effectId in effectIds:
            self._execute("""
                INSERT INTO task_effect (task_id, effect_id)
                VALUES (%(task_id)s, %(effect_id)s)
            """, {'task_id': id, 'effect_id': effectId,}, False, False)
        self._commit()
        return id

    def repush(self, label, id, effectIds):
        newId = self._execute("""
            INSERT INTO task (label, is_active, description, subject_id)
            VALUES (%(label)s, TRUE, 'redo autogenerated', (SELECT subject_id FROM task WHERE id = %(id)s))
            RETURNING id
        """, {'label': label, 'id': id,}, True)
        self._execute("""
            INSERT INTO task_option
            SELECT %(new_task_id)s, option_id FROM task_option
            WHERE %(task_id)s = task_id
        """, {'new_task_id': newId, 'task_id': id,}, False, False)
        for effectId in effectIds:
            self._execute("""
                INSERT INTO task_effect (task_id, effect_id)
                VALUES (%(task_id)s, %(effect_id)s)
            """, {'task_id': newId, 'effect_id': effectId,}, False, False)
        self._commit()
        return newId
